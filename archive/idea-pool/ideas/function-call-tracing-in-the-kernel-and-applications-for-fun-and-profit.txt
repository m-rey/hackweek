====== Function Call Tracing in the Kernel and Applications (for Fun and Profit) ======

/* If this is your first time using the Idea Pool, please take a second to read the  comment at the end of this template, which explains how to use tags.  

Topic tags: Community, Security, QA, Kernel, Desktop, Management, UnixFeature, Server, Performance, DevTool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Status tags: Idea, InProgress, TryMe, InBuildService, Done, Shipped
Help tags: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packaging

Separate tags with a space like this:
{{tag> blargle fizzbozz bimbledeedoo}}
*/

{{tag>Community Security QA Kernel Desktop Management UnixFeature Server Performance DevTool InProgress HW-Tester HW-Docs HW-Packaging}}

===== Description =====
/* Describe your idea here. */
The project FCTRACE -- function call tracing -- uses the Linux kernel
probes (kprobes) to trace kernel mode (and later user mode) function
calls done by an application or any thread of execution. By design, it
tries to have as little negative impact on system performance as
possible, and sets up and removes probes dynamically as needed.

The aim for this week is to create a generally working prototype, which
can start a trace in kernel space from a specified function address or a
given system-call.

There are various uses for this, here are some of the main uses I had in mind:
  * as a RAS (reliability, availability, serviceability) tool: a user has a difficult-to-reproduce but serious problem with an application or kernel (spurious crashes, data loss or corruption etc.): he can use fctrace to get the call history and cut down on the code review that needs to be done
  * as a helper for improved bug reports: a user can reproduce a problem easily on large installations, special hardware or a special setup that the developer cannot access: the user can use fctrace to give the developer more information so he can fix the bug nonetheless, or home in quickly on problematic code behaviour and create simple test code snippets for the user to try out
  * as a security team tool: understanding what happens in the code is essential for finding security problems proactively: the tool can speed up understanding the general structure of a program; also, for reactively finding and fixing security bugs, the tool can quickly show the involved functions and speed up the fix process
  * as a performance analysis tool (this is a future extension): the performance analysis does not need a setup and gathers data from the actual execution environment
  * as a learning tool (helping the community to thrive): what happens (e.g. in the kernel, in Mozilla, in Apache, in glibc etc.) when the user clicks here, calls this kernel or library function, etc.

The main benefits over other tracing tools (strace, ltrace, LTT and related tools like systemtap) are one or more of these: fctrace
  * shows all function calls, not just system or library calls
  * is supported on all main platforms (basically every platform that has kprobes)
  * is simple to port
  * has very little need for maintenance
  * module can be compiled and used with any kernel (that supports kprobes), not just SUSE kernels
  * has no performance impact when unused, quite small performance impact when used
  * has little or no loss of events
  * works with any application or kernel thread
  * has ease of use -- as simple as strace, no setup is needed
  * has lots of possibilities for extension (e.g. in the security area)
  * planned extension: filtering of calls
  * planned extension: display function arguments (requires debuginfo or type info in executable)
  * planned extension: call graphs (with separate evaluator)
  * planned extension: performance analysis (with separate frontend)
  * planned extension: ... more ideas (and designs) exist, need to add them here

The main idea is that nowadays applications and the kernel are far too big to watch and
understand from the behaviour at the external interfaces only. Watching the function calls
gives additional information which is often sufficient to understand a problem. At the
very least, it can usually help to quickly identify the function or a set of functions that
need to be checked.

Without fctrace, this information can in principle be gathered from the source code (if
available). But with the abundance of function registrations for plugins and modules
that are nowadays being used in many applications (Apache, Mozilla, Gimp, ...) and the
kernel, tracing the source becomes much more tedious. Also, in some situations a fix
is really wanted (data corruption), but the reproducer of the problem would not look
through the source code himself. And even for a developer, esp. who is looking at
yet unknown code, this task is better left to a tool which can work much more quickly.

===== People =====
/* This section is for listing all of the people involved in this idea or project:
  - The originator(s) of the idea
  - Interested people who might later help out with implementing this idea
  - Experts or knowledgeable people who could give advice about this idea

If you are already working on this project, and you need help, you can use one of the  HelpWanted tags to say so, and then write some specific details about the kinds of help that you need here. */

Olaf Dabrunz originated this idea. Patrick Kirsch programmed the initial prototype. Olaf and Patrick are improving the prototype. Help is wanted, see help tags (or any other kind of contribution). :)

===== Related Materials =====
/* Links, mockups, screen captures, files. */

The sourceforge project page is at https://sourceforge.net/projects/call-tracing.
The Subversion branch we are currently working on is the new-layout branch at 
https://call-tracing.svn.sourceforge.net/svnroot/call-tracing/branches/new-layout.

/* How to Use Tags

All idea pages are tagged to make them easier to find and to indicate to the rest of the world the current state of your project.

You can apply as many topic and product tags to your idea as you want.

Status Tags
-----------
Idea: No one is working on this idea yet.
InProgress:  The project is underway.  When you apply this tag to an idea, please also edit the People section of the page to indicate who is working on the project. 
TryMe:  This project is at the point where other people can try it.  Include a link for code/packages in the page so people can find it.
InBuildService:  Idea's implementation posted in the openSUSE build service.  Provide a link.
Done:  The idea has been fully realized (though it may not yet be in a product).
Shipped:  Hooray!

Help tags:  
----------

You can apply Help tags to your project to recruit other people to help you with its implementation.  Don't apply Help tags to a project which is not already being implemented.  
Before applying any HelpWanted tags to your project, make sure that you've listed the current project contributors and leaders in the People section of this page, so that potential contributors know whom to contact.

HelpWanted:  This is a generic tag that you can apply to indicate that you want help on a project.
HW-Hacker: You need help writing code.
HW-Tester: You have something that you want help testing, or writing unit tests for.
HW-Designer: You have a great idea but can't come up with the UI? Ask for help.
HW-PM: You want help from a product manager, to get market research or talk to a partner.
HW-Docs: You want someone to help you write documentation for your project.
HW-Packaging: Your project is going well but you want someone to help you build packages out of it.
*/


/*
Topic tags: Community, Security, Kernel, Desktop, Virtualization, Web20, Mobile, Management, Network, UnixFeature, Server, LowPower, Performance, LAMP, Graphics, DevTool, Mono, IdeaPool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Help: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packaging
Status: Idea, InProgress, TryMe, InBuildService, Done, Shipped

Separate your tags with a space (e.g "tag>Idea Server Performance").
*/

/*Happy Hacking everyone!*/