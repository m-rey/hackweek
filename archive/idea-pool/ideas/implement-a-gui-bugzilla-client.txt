====== Implement a GUI bugzilla client ======

/* If this is your first time using the Idea Pool, please take a second to read the  comment at the end of this template, which explains how to use tags.  

Topic tags: Community, Security, QA, Kernel, Desktop, Virtualization, Web20, Mobile, Management, Network, UnixFeature, Server, LowPower, Performance, LAMP, Graphics, DevTool, Mono, IdeaPool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Status tags: Idea, InProgress, TryMe, InBuildService, Done, Shipped
Help tags: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packaging

Separate tags with a space like this:
{{tag> blargle fizzbozz bimbledeedoo}}
*/

{{tag>Idea Desktop Mono}}

===== Description =====
/* Describe your idea here. */
Implement a bugzilla client library and GUI, so we can use bugzilla without going through the web interface.

It should include all basic bugzilla features, like Login, Search, Customize / Save searches, Add / Modify bugs, [add more here]

A local cache and offline mode would be handy.

The whole thing is to be implemented in Mono/C#, the GUI toolkit is still under discussion... should it be Winforms? Gtk#, XAML? All of the above?

Grendel: I believe we should include all the GUI versions with one backend library. Maybe even provide a GTK# Bugzilla control? And a MonoDevelop Add-In based on the library.

===== People =====
/* This section is for listing all of the people involved in this idea or project:
  - The originator(s) of the idea
  - Interested people who might later help out with implementing this idea
  - Experts or knowledgeable people who could give advice about this idea

If you are already working on this project, and you need help, you can use one of the  HelpWanted tags to say so, and then write some specific details about the kinds of help that you need here. */

Andreia Gaita originated this idea.

Marek Habersack is interested in working on this idea

===== Related Materials =====

Bugzilla client library can be shared with the [[Error reporting library and infrastructure]] project.

/* Links, mockups, screen captures, files. */


/* How to Use Tags

All idea pages are tagged to make them easier to find and to indicate to the rest of the world the current state of your project.

You can apply as many topic and product tags to your idea as you want.

Status Tags
-----------
Idea: No one is working on this idea yet.
InProgress:  The project is underway.  When you apply this tag to an idea, please also edit the People section of the page to indicate who is working on the project. 
TryMe:  This project is at the point where other people can try it.  Include a link for code/packages in the page so people can find it.
InBuildService:  Idea's implementation posted in the openSUSE build service.  Provide a link.
Done:  The idea has been fully realized (though it may not yet be in a product).
Shipped:  Hooray!

Help tags:  
----------

You can apply Help tags to your project to recruit other people to help you with its implementation.  Don't apply Help tags to a project which is not already being implemented.  
Before applying any HelpWanted tags to your project, make sure that you've listed the current project contributors and leaders in the People section of this page, so that potential contributors know whom to contact.

HelpWanted:  This is a generic tag that you can apply to indicate that you want help on a project.
HW-Hacker: You need help writing code.
HW-Tester: You have something that you want help testing, or writing unit tests for.
HW-Designer: You have a great idea but can't come up with the UI? Ask for help.
HW-PM: You want help from a product manager, to get market research or talk to a partner.
HW-Docs: You want someone to help you write documentation for your project.
HW-Packaging: Your project is going well but you want someone to help you build packages out of it.
*/


/*
Topic tags: Community, Security, Kernel, Desktop, Virtualization, Web20, Mobile, Management, Network, UnixFeature, Server, LowPower, Performance, LAMP, Graphics, DevTool, Mono, IdeaPool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Help: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packaging
Status: Idea, InProgress, TryMe, InBuildService, Done, Shipped

Separate your tags with a space (e.g "tag>Idea Server Performance").
*/

/*Happy Hacking everyone!*/

===== Comments =====

Since the discussion area looks to be down at the moment, I'm going to add some comments here.

  * The code is hosted at http://code.google.com/p/bugzz/
  * We're on #bugzz at gimpnet.

==== Featurettes: ====

  * 3 GUIs, one backend library. The GUIs should preferably follow one single design, so they do more or less the same and we don't spend too much time on design/usability issues. Also, for extra cookie points, we can see how the 3 toolkits compare.

  * We need to avoid the chain login time, which is enormous and not needed, since the bugzilla login itself is fast. Some sort of timeout, or check what the login returns to see if we can know when the bugzilla login is done.

  * Customization settings for default values in searches and bugs. This will probably involve adding support for XML templates for people to use

  * Offline mode

  * Caching mechanism for bugs and search results.

  * Batch commits when changing from offline to online mode

  * Synchronization mechanism for detecting changes in online bugs when batch commiting, and, for certain conditions (the bug changed status online while the user was offline, for instance), confirm the change before commiting it.

==== Ongoing status ====

  *  First screenshot of live, freshly baked bugs! {{http://bugzz.googlecode.com/svn-history/r23/trunk/screenies/we_have_bugs!.png?557x475}} --- //[[shana.ufie@gmail.com|Andreia Gaita]] 2008-02-12 @ 21:09//
