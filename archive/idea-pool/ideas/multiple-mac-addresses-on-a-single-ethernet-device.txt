====== multiple MAC addresses on a single ethernet device ======

/* If this is your first time using the Idea Pool, please take a second to read the  comment at the end of this template, which explains how to use tags.  

Topic tags: Community, Security, QA, Kernel, Desktop, Virtualization, Web20, Mobile, Management, Network, UnixFeature, Server, LowPower, Performance, LAMP, Graphics, DevTool, Mono, IdeaPool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Status tags: Idea, InProgress, TryMe, InBuildService, Done, Shipped
Help tags: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packaging

Separate tags with a space like this:
{{tag> blargle fizzbozz bimbledeedoo}}
*/

{{tag>Kernel Network InProgress}}

===== Description =====
/* Describe your idea here. */

The idea is to allow a single host to use multiple MAC addresses
simultaneously over a single physical network device.

The main use case why I am doing this is described below, but I'd be
interested to hear if this could be useful for other things as well.

The DSL lines of Deutsche Telekom allow up to 10 simultaneous
PPPoE connections per DSL line, but only one per client side MAC address.
To terminate more than one PPPoE connection from the same DSL line
on a single host (e.g. one for IPv4 and one for IPv6), the host ether needs
one network card per PPPoE connection and have them connected to the DSL
moden via a switch, or it needs a way to let the ppp daemons use individual
MAC addresses over a single physical ethernet device.

So far, I came up with the following approaches to implement this:

  - Write a kernel module that creates pairs of crossconnected network devices, one pair per desired PPPoE connection. Of each pair one device will be put into a bridge with the physical ethernet device and the other one will be used by one ppp deamon. This is similar to the Xen netloop device, but doesn't depend on Xen.
  - Extend the network bridging code, so that a bridge can have multiple network devices with individual MAC addresses that work similar to 'brX'. This would be a software implementation of the "multiple network cards connected to a single switch" hardware solution, described above. The pro over approach 1 is, that for n PPPoE sessions it needs only n network devices instead of 2n. It might also be somewhat more efficient, because the packets have one less network interface to traverse on their way.
  - Extend the PPPoE code (kernel and userspace), so that a MAC address can be set in the ppp configuration which will be used for this session and the ethernet device will automatically be put into promiscuous mode if this option is given.

I already have a working implementation of 1, which is based on the dummy network
driver and will try to get that into the kernel, either as a separate module or
integrated back into the dummy driver.

Approach 3 would probably be the easiest to use, but it looks like it is also
the hardest to implement from what I have seen by looking at the code so far.
Also, it would only be usable for the PPPoE use case, whereas 1 and 2 are more
generic.

I will use hackweek to try implementing approach 2.

===== People =====
/* This section is for listing all of the people involved in this idea or project:
  - The originator(s) of the idea
  - Interested people who might later help out with implementing this idea
  - Experts or knowledgeable people who could give advice about this idea

If you are already working on this project, and you need help, you can use one of the  HelpWanted tags to say so, and then write some specific details about the kinds of help that you need here. */

Reinhard Max originated this idea and is working on implementing it.

===== Related Materials =====
/* Links, mockups, screen captures, files. */


/* How to Use Tags

All idea pages are tagged to make them easier to find and to indicate to the rest of the world the current state of your project.

You can apply as many topic and product tags to your idea as you want.

Status Tags
-----------
Idea: No one is working on this idea yet.
InProgress:  The project is underway.  When you apply this tag to an idea, please also edit the People section of the page to indicate who is working on the project. 
TryMe:  This project is at the point where other people can try it.  Include a link for code/packages in the page so people can find it.
InBuildService:  Idea's implementation posted in the openSUSE build service.  Provide a link.
Done:  The idea has been fully realized (though it may not yet be in a product).
Shipped:  Hooray!

Help tags:  
----------

You can apply Help tags to your project to recruit other people to help you with its implementation.  Don't apply Help tags to a project which is not already being implemented.  
Before applying any HelpWanted tags to your project, make sure that you've listed the current project contributors and leaders in the People section of this page, so that potential contributors know whom to contact.

HelpWanted:  This is a generic tag that you can apply to indicate that you want help on a project.
HW-Hacker: You need help writing code.
HW-Tester: You have something that you want help testing, or writing unit tests for.
HW-Designer: You have a great idea but can't come up with the UI? Ask for help.
HW-PM: You want help from a product manager, to get market research or talk to a partner.
HW-Docs: You want someone to help you write documentation for your project.
HW-Packaging: Your project is going well but you want someone to help you build packages out of it.
*/


/*
Topic tags: Community, Security, Kernel, Desktop, Virtualization, Web20, Mobile, Management, Network, UnixFeature, Server, LowPower, Performance, LAMP, Graphics, DevTool, Mono, IdeaPool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Help: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packaging
Status: Idea, InProgress, TryMe, InBuildService, Done, Shipped

Separate your tags with a space (e.g "tag>Idea Server Performance").
*/

/*Happy Hacking everyone!*/