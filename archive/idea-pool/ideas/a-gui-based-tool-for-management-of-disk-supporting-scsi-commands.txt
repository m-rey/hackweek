====== A gui based tool for management of disk supporting scsi commands ======

/* If this is your first time using the Idea Pool, please take a second to read the  comment at the end of this template, which explains how to use tags.  

Topic tags: Community, Security, QA, Kernel, Desktop, Virtualization, Web20, Mobile, Management, Network, UnixFeature, Server, LowPower, Performance, LAMP, Graphics, DevTool, Mono, IdeaPool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Status tags: Idea, InProgress, TryMe, InBuildService, Done, Shipped
Help tags: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packaging

Separate tags with a space like this:
{{tag> blargle fizzbozz bimbledeedoo}}
*/

{{tag>Idea storage management}}

===== Description =====
The command line sg_util is useful for issuing scsi commands to disk. A gui based tool would be more helpful in verifying the contents of data at particular block address and also issuing scsi commands. The scsi commands can be issued to sg device with ioctl calls.

===== People =====
/* This section is for listing all of the people involved in this idea or project:
  - The originator(s) of the idea
  - Interested people who might later help out with implementing this idea
  - Experts or knowledgeable people who could give advice about this idea

If you are already working on this project, and you need help, you can use one of the  HelpWanted tags to say so, and then write some specific details about the kinds of help that you need here. */

Jayshankar originated this idea.  No one is currently working on implementing this idea (it's up for grabs!).

===== Related Materials =====
/* Links, mockups, screen captures, files. */

The sample code for issuing scsi commands like read capacity, read and get scsi id to disk.

#include<fcntl.h>
#include<errno.h>
#include<sys/ioctl.h>
#include<scsi/sg.h>
#include<stdio.h>
#include <string.h>
#include "scsi.h"


#define INQ_REPLY_LEN 96
#define INQ_CMD_CODE 0x12
#define INQ_CMD_LEN 6

#define READ_CAP_CMD_CODE 0x25
#define READ_CAP_REPLY_LEN 16 
#define  READ_CAP_CMD_LEN 10 

#define READ_CMD_CODE 0x28
#define READ_REPLY_LEN 512 
#define  READ_CMD_LEN 10 

static int GET_SG_SCSI_ID(char *,sg_scsi_id_t *);
static int SEND_INQUIRY_COMMAND(char *,sg_scsi_id_t *);
static int READ_CAPACITY_COMMAND(char *,sg_scsi_id_t *,disk_info_t *);



main()
{
int ret;
sg_scsi_id_t scsi_id; 
disk_info_t disk_info;



printf(" Size of sg_scsi_id=%d n",sizeof(sg_scsi_id_t));


 /* Call GET_SG_SCSI_ID  */
ret = GET_SG_SCSI_ID("/dev/sg0",&scsi_id);

printf("Hostno=%d Channel=%d scsi_id =%d  lun = %d scsi_type = %d cmd_per_lun=%u    d_queue_depth =%u n",scsi_id.host_no,scsi_id.channel,scsi_id.scsi_id,scsi_id.lun,scsi_id.scsi_type,scsi_id.h_cmd_per_lun,scsi_id.d_queue_depth);

 /* Call SEND_INQUIRY_COMMAND  */

ret = SEND_INQUIRY_COMMAND("/dev/sg0",&scsi_id);
ret = READ_CAPACITY_COMMAND("/dev/sg0",&scsi_id,&disk_info);
printf("In %s: end_lba = 0x%llx  disk_size= 0x%lld n",__FUNCTION__,disk_info.end_lba,disk_info.disk_size);

ret = READ10("/dev/sg0",&scsi_id,&disk_info);

}



/* Function: GET_SG_SCSI_ID()
 *
*/ 


int GET_SG_SCSI_ID(char *dev_path,sg_scsi_id_t *scsi_id)
{

int sg_fd;
int check_val;


if ( (sg_fd = open(dev_path ,O_RDONLY)) < 0 ) 
   {
      perror("Error opening given file ");
      return -1;
   }

if ( (ioctl(sg_fd, SG_GET_VERSION_NUM,&check_val) < 0) || ( check_val < 30000 ) )
   {
   perror(" /dev/sg0 is not an sg device ");
   return -1;

   }

if  ( ( ioctl(sg_fd,SG_GET_SCSI_ID,scsi_id) < 0 ) ) 

{
     perror(" Error  SG_GET_SCSI_ID");
     return -1;
}


/*
printf("Hostno=%d Channel=%d scsi_id =%d  lun = %d scsi_type = %d cmd_per_lun=%u    d_queue_depth =%u n",scsi_id.host_no,scsi_id.channel,scsi_id.scsi_id,scsi_id.lun,scsi_id.scsi_type,scsi_id.h_cmd_per_lun,scsi_id.d_queue_depth);
 */ 

close(sg_fd);
return 0;

}


int SEND_INQUIRY_COMMAND(char *dev_path,sg_scsi_id_t *scsi_id)
{

/* This is a "standard" SCSI INQUIRY command. It is standard because the
 * CMDDT and EVPD bits (in the second byte) are zero. All SCSI targets
 * should respond promptly to a standard INQUIRY 
*/

    int sg_fd, k;
    unsigned char inqCmdBlk[INQ_CMD_LEN] =
                    {INQ_CMD_CODE, 0, 0, 0, INQ_REPLY_LEN, 0};
    unsigned char inqBuff[INQ_REPLY_LEN];
    unsigned char sense_buffer[32];
    sg_io_hdr_t io_hdr;

    if ((sg_fd = open(dev_path, O_RDONLY)) < 0) {
    	/* Note that most SCSI commands require the O_RDWR flag to be set */
        perror("error opening given file name");
        return -1;
    }


    /* It is prudent to check we have a sg device by trying an ioctl */


    if ((ioctl(sg_fd, SG_GET_VERSION_NUM, &k) < 0) || (k < 30000)) {
        printf("/dev/sg0 is not an sg device, or old sg drivern");
        return -1;
    }
    /* Prepare INQUIRY command */
    memset(&io_hdr, 0, sizeof(sg_io_hdr_t));
    io_hdr.interface_id = 'S';
    io_hdr.cmd_len = sizeof(inqCmdBlk);
    /* io_hdr.iovec_count = 0; */  /* memset takes care of this */
    io_hdr.mx_sb_len = sizeof(sense_buffer);
    io_hdr.dxfer_direction = SG_DXFER_FROM_DEV;
    io_hdr.dxfer_len = INQ_REPLY_LEN;
    io_hdr.dxferp = inqBuff;
    io_hdr.cmdp = inqCmdBlk;
    io_hdr.sbp = sense_buffer;
    io_hdr.timeout = 20000;     /* 20000 millisecs == 20 seconds */
    /* io_hdr.flags = 0; */     /* take defaults: indirect IO, etc */
    /* io_hdr.pack_id = 0; */
    /* io_hdr.usr_ptr = NULL; */

    if (ioctl(sg_fd, SG_IO, &io_hdr) < 0) {
        perror("sg_simple0: Inquiry SG_IO ioctl error");
        return -1;
    }

    /* now for the error processing */
    if ((io_hdr.info & SG_INFO_OK_MASK) != SG_INFO_OK) {
        if (io_hdr.sb_len_wr > 0) {
            printf("INQUIRY sense data: ");
            for (k = 0; k < io_hdr.sb_len_wr; ++k) {
                if ((k > 0) && (0 == (k % 10)))
                    printf("n  ");
                printf("0x%02x ", sense_buffer[k]);
            }
            printf("n");
        }
        if (io_hdr.masked_status)
            printf("INQUIRY SCSI status=0x%xn", io_hdr.status);
        if (io_hdr.host_status)
            printf("INQUIRY host_status=0x%xn", io_hdr.host_status);
        if (io_hdr.driver_status)
            printf("INQUIRY driver_status=0x%xn", io_hdr.driver_status);
    }
    else {  /* assume INQUIRY response is present */
        char * p = (char *)inqBuff;
        printf("Some of the INQUIRY command's response:n");
        printf("    %.8s %.16s %.4s n", p+8,p+16,p+4 );
        printf("INQUIRY duration=%u millisecs, resid=%dn",
               io_hdr.duration, io_hdr.resid);
    }
    close(sg_fd);
    return 0;
}


/* Function: Read Capacity()

*/

int READ_CAPACITY_COMMAND(char *dev_path,sg_scsi_id_t *scsi_id,disk_info_t *disk_info)
{

/* READ CAPACITY COMMAND. It is standard because the
 */

    int sg_fd, k;
    uint lba;
    uint lba_size;
    unsigned char *ch_lba,*ch_lba_size;
    unsigned long long int disk_size;

    unsigned char readCapCmdBlk[READ_CAP_CMD_LEN] =
                    {READ_CAP_CMD_CODE, 0, 0, 0, 0, 0,0,0,0,0};
    unsigned char readCapBuff[READ_CAP_REPLY_LEN];
    unsigned char sense_buffer[32];
    sg_io_hdr_t io_hdr;

    if ((sg_fd = open(dev_path, O_RDONLY)) < 0) {
    	/* Note that most SCSI commands require the O_RDWR flag to be set */
        perror("error opening given file name");
        return -1;
    }


    /* It is prudent to check we have a sg device by trying an ioctl */


    if ((ioctl(sg_fd, SG_GET_VERSION_NUM, &k) < 0) || (k < 30000)) {
        printf("/dev/sg0 is not an sg device, or old sg drivern");
        return -1;
    }
    /* Prepare INQUIRY command */
    memset(&io_hdr, 0, sizeof(sg_io_hdr_t));
    io_hdr.interface_id = 'S';
    io_hdr.cmd_len = sizeof(readCapCmdBlk);
    /* io_hdr.iovec_count = 0; */  /* memset takes care of this */
    io_hdr.mx_sb_len = sizeof(sense_buffer);
    io_hdr.dxfer_direction = SG_DXFER_FROM_DEV;
    io_hdr.dxfer_len = READ_CAP_REPLY_LEN;
    io_hdr.dxferp = readCapBuff;
    io_hdr.cmdp = readCapCmdBlk;
    io_hdr.sbp = sense_buffer;
    io_hdr.timeout = 20000;     /* 20000 millisecs == 20 seconds */
    /* io_hdr.flags = 0; */     /* take defaults: indirect IO, etc */
    /* io_hdr.pack_id = 0; */
    /* io_hdr.usr_ptr = NULL; */

    if (ioctl(sg_fd, SG_IO, &io_hdr) < 0) {
        perror("sg_simple0: Inquiry SG_IO ioctl error");
        return -1;
    }

    /* now for the error processing */
    if ((io_hdr.info & SG_INFO_OK_MASK) != SG_INFO_OK) {
        if (io_hdr.sb_len_wr > 0) {
            printf("INQUIRY sense data: ");
            for (k = 0; k < io_hdr.sb_len_wr; ++k) {
                if ((k > 0) && (0 == (k % 10)))
                    printf("n  ");
                printf("0x%02x ", sense_buffer[k]);
            }
            printf("n");
        }
        if (io_hdr.masked_status)
            printf("INQUIRY SCSI status=0x%xn", io_hdr.status);
        if (io_hdr.host_status)
            printf("INQUIRY host_status=0x%xn", io_hdr.host_status);
        if (io_hdr.driver_status)
            printf("INQUIRY driver_status=0x%xn", io_hdr.driver_status);
    }
    else {  /* assume INQUIRY response is present */
        char * p = (char *)readCapBuff;
        printf("Some of the read caacpity comman response:");
        printf("0x%0x 0x%0x 0x%0x 0x%0x 0x%0x 0x%0x 0x%0x 0x%0x n", p[0],p[1],p[2],(char)p[3],p[4],p[5],p[6],p[7]);
        printf("INQUIRY duration=%u millisecs, resid=%dn",
               io_hdr.duration, io_hdr.resid);

        ch_lba =  (unsigned char *)&lba;

       /* Handling little endian */

       /* End lba  */
       ch_lba[0]=p[3];
       ch_lba[1]=p[2];
       ch_lba[2]=p[1];
       ch_lba[3]=p[0];

       /* End lba size */
       ch_lba_size = (unsigned char *)&lba_size;
       ch_lba_size[0]= p[7];
       ch_lba_size[1] = p[6];
       ch_lba_size[2] = p[5];
       ch_lba_size[3] = p[4];
 

       /* TODO: Handle big endian 
          READ_CAPACITY16 
    
          if (lba == 0xFFFFFFFF)
             Issue read_capacity16

        */

       printf(" lba = %x  %d n",lba,lba); 
       printf(" lba size = %x  %d n",lba_size,lba_size); 
      
 
        disk_size = (unsigned long long int)(lba + 1) * (unsigned long long int)lba_size;
       disk_info->end_lba = (unsigned long long int)lba;
       disk_info->disk_size=(unsigned long long int)disk_size; 

       printf(" disk_size  =   %lld bytes n",disk_size); 

    }

    close(sg_fd);
    return 0;

}


int READ10(char *dev_path,sg_scsi_id_t *scsi_id)
{
    int sg_fd, k;
    uint lba;
    uint lba_size;
    unsigned char *ch_lba,*ch_lba_size;
    unsigned long long int disk_size;

    unsigned char readCmdBlk[READ_CMD_LEN] =
                    {READ_CMD_CODE, 0, 0, 0x1, 0x1, 0xff,0,0,0x01,0};
    unsigned char readBuff[READ_REPLY_LEN];
    unsigned char sense_buffer[32];
    sg_io_hdr_t io_hdr;

    if ((sg_fd = open(dev_path, O_RDONLY)) < 0) {
    	/* Note that most SCSI commands require the O_RDWR flag to be set */
        perror("error opening given file name");
        return -1;
    }


    /* It is prudent to check we have a sg device by trying an ioctl */


    if ((ioctl(sg_fd, SG_GET_VERSION_NUM, &k) < 0) || (k < 30000)) {
        printf("/dev/sg0 is not an sg device, or old sg drivern");
        return -1;
    }
    /* Prepare INQUIRY command */
    memset(&io_hdr, 0, sizeof(sg_io_hdr_t));
    io_hdr.interface_id = 'S';
    io_hdr.cmd_len = sizeof(readCmdBlk);
    /* io_hdr.iovec_count = 0; */  /* memset takes care of this */
    io_hdr.mx_sb_len = sizeof(sense_buffer);
    io_hdr.dxfer_direction = SG_DXFER_FROM_DEV;
    io_hdr.dxfer_len = READ_REPLY_LEN;
    io_hdr.dxferp = readBuff;
    io_hdr.cmdp = readCmdBlk;
    io_hdr.sbp = sense_buffer;
    io_hdr.timeout = 20000;     /* 20000 millisecs == 20 seconds */
    io_hdr.flags |= SG_FLAG_DIRECT_IO;
/*    io_hdr.flags |= SG_FLAG_MMAP_IO; */

    /* io_hdr.flags = 0; */     /* take defaults: indirect IO, etc */
    /* io_hdr.pack_id = 0; */
    /* io_hdr.usr_ptr = NULL; */

    if (ioctl(sg_fd, SG_IO, &io_hdr) < 0) {
        perror("sg_simple0: Inquiry SG_IO ioctl error");
        return -1;
    }

    /* now for the error processing */
    if ((io_hdr.info & SG_INFO_OK_MASK) != SG_INFO_OK) {
        if (io_hdr.sb_len_wr > 0) {
            printf("INQUIRY sense data: ");
            for (k = 0; k < io_hdr.sb_len_wr; ++k) {
                if ((k > 0) && (0 == (k % 10)))
                    printf("n  ");
                printf("0x%02x ", sense_buffer[k]);
            }
            printf("n");
        }
        if (io_hdr.masked_status)
            printf("INQUIRY SCSI status=0x%xn", io_hdr.status);
        if (io_hdr.host_status)
            printf("INQUIRY host_status=0x%xn", io_hdr.host_status);
        if (io_hdr.driver_status)
            printf("INQUIRY driver_status=0x%xn", io_hdr.driver_status);
    }
    else {  /* assume INQUIRY response is present */
        char * p = (char *)readBuff;
        printf("Some of the read command response:");
        printf("0x%0x 0x%0x 0x%0x 0x%0x 0x%0x 0x%0x 0x%0x 0x%0x n", p[0],p[1],p[2],(char)p[3],p[4],p[5],p[6],p[7]);
        printf("INQUIRY duration=%u millisecs, resid=%dn",
               io_hdr.duration, io_hdr.resid);

        }


}


void  set_lba32(unsigned char *lba,int bytes,uint32_t addr)
{
int l_bytes = bytes-1;

lba[l_bytes--] = ( addr & 0xFF);
lba[l_bytes--] = ( addr  & 0xFF00) >> 8;
lba[l_bytes--] = ( addr  & 0xFF0000) >> 16;
lba[l_bytes] = ( addr  & 0xFF000000) >> 24;



}



void  set_lba64(unsigned char *lba,int bytes,uint64_t addr)
{
int l_bytes = bytes-1;

lba[l_bytes--] = ( addr & 0xFF);
lba[l_bytes--] = ( addr  & 0xFF00) >> 8;
lba[l_bytes--] = ( addr  & 0xFF0000) >> 16;
lba[l_bytes--] = ( addr  & 0xFF000000) >> 24;
lba[l_bytes--] = ( addr  & 0xFF00000000) >> 32;
lba[l_bytes--] = ( addr  & 0xFF0000000000) >> 40;
lba[l_bytes--] = ( addr  & 0xFF000000000000) >> 48;
lba[l_bytes] = ( addr  & 0xFF00000000000000) >> 54;



}


/* How to Use Tags

All idea pages are tagged to make them easier to find and to indicate to the rest of the world the current state of your project.

You can apply as many topic and product tags to your idea as you want.

Status Tags
-----------
Idea: No one is working on this idea yet.
InProgress:  The project is underway.  When you apply this tag to an idea, please also edit the People section of the page to indicate who is working on the project. 
TryMe:  This project is at the point where other people can try it.  Include a link for code/packages in the page so people can find it.
InBuildService:  Idea's implementation posted in the openSUSE build service.  Provide a link.
Done:  The idea has been fully realized (though it may not yet be in a product).
Shipped:  Hooray!

Help tags:  
----------

You can apply Help tags to your project to recruit other people to help you with its implementation.  Don't apply Help tags to a project which is not already being implemented.  
Before applying any HelpWanted tags to your project, make sure that you've listed the current project contributors and leaders in the People section of this page, so that potential contributors know whom to contact.

HelpWanted:  This is a generic tag that you can apply to indicate that you want help on a project.
HW-Hacker: You need help writing code.
HW-Tester: You have something that you want help testing, or writing unit tests for.
HW-Designer: You have a great idea but can't come up with the UI? Ask for help.
HW-PM: You want help from a product manager, to get market research or talk to a partner.
HW-Docs: You want someone to help you write documentation for your project.
HW-Packaging: Your project is going well but you want someone to help you build packages out of it.
*/


/*
Topic tags: Community, Security, Kernel, Desktop, Virtualization, Web20, Mobile, Management, Network, UnixFeature, Server, LowPower, Performance, LAMP, Graphics, DevTool, Mono, IdeaPool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Help: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packaging
Status: Idea, InProgress, TryMe, InBuildService, Done, Shipped

Separate your tags with a space (e.g "tag>Idea Server Performance").
*/

/*Happy Hacking everyone!*/