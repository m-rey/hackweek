====== Recursive modification time ======

/* If this is your first time using the Idea Pool, please take a second to read the  comment at the end of this template, which explains how to use tags.  

Topic tags: Community, Security, QA, Kernel, Desktop, Virtualization, Web20, Mobile, Management, Network, UnixFeature, Server, LowPower, Performance, LAMP, Graphics, DevTool, Mono, IdeaPool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Status tags: Idea, InProgress, TryMe, InBuildService, Done, Shipped
Help tags: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packaging

Separate tags with a space like this:
{{tag> blargle fizzbozz bimbledeedoo}}
*/

{{tag>InProgress Kernel Performance UnixFeature SLES SLED openSUSE}}

===== Description =====
The basic idea is simple: Provide an efficient way for an application to find out whether & which file / directory in the subtree of the given directory has changed. So for example things like your backup program, beagle, etc. don't have to scan unchanged parts of the system again and again. Also e.g. KDE could cache desktop files and use this mechanism to verify whether it's cache is still valid.

How to do it efficiently: For each directory we keep on disk two additional pieces of information. A flag and a timestamp. Flag has a meaning "I want recursive modification time on this directory". Timestamp has a meaning "flag has been reset at this time". What kernel does when directory / file D is modified is:
''While D has the flag set do
    reset the flag
    set the timestamp to current time
    D = parent of D
done''

What application does is: As an initialization step during installation, it sets flags on the directory and its subdirectories it is interested in. When it wants to check for modification, it checks whether the timestamp is newer than the time when the last check happened. If not, we know nothing in the subtree has changed and we don't have to scan this subtree further. If yes, we enter the directory, recursively scan it's contents and set the flag.

Note that this scheme has several nice properties:
  - frequently modified files cause just one propagation of modification time between scans by an application
  - the scheme works correctly for arbitrary number of applications watching the same directory
  - contents of unchanged directories don't have to be read
  - scales well when applied to the whole filesystem
(last two points are the main advantages against currently available systems like FAM)

Some bad properties:
  - hardlinks and bind mounts have to be handled separately from userspace (this can be mostly hidden by a library between an application and kernel)
  - needs support in the filesystem, disk format change (or we have to use xattrs but then performance is worse)
===== People =====
/* This section is for listing all of the people involved in this idea or project:
  - The originator(s) of the idea
  - Interested people who might later help out with implementing this idea
  - Experts or knowledgeable people who could give advice about this idea

If you are already working on this project, and you need help, you can use one of the  HelpWanted tags to say so, and then write some specific details about the kinds of help that you need here. */

The general idea is a folklore. Ideas how to implement it are from Jan Kara (me ;), thanks goes also to Pavel Machek for useful discussions.

I (Jan Kara, <jack@suse.cz>) have a kernel patch done for ext3 (although it may need some tweaks still), I'm working on the library hiding nasty things about bind mounts and hardlinks (to prove that I'm right and these problems *can* be solved ;).

http://beta.suse.com/private/jack/recursive_mtime carries the kernel patches for ext3 (against 2.6.23) and a short proposal for the library interface. I can provide a current library code on request but that's still under heavy development...

===== Related Materials =====
/* Links, mockups, screen captures, files. */


/* How to Use Tags

All idea pages are tagged to make them easier to find and to indicate to the rest of the world the current state of your project.

You can apply as many topic and product tags to your idea as you want.

Status Tags
-----------
Idea: No one is working on this idea yet.
InProgress:  The project is underway.  When you apply this tag to an idea, please also edit the People section of the page to indicate who is working on the project. 
TryMe:  This project is at the point where other people can try it.  Include a link for code/packages in the page so people can find it.
InBuildService:  Idea's implementation posted in the openSUSE build service.  Provide a link.
Done:  The idea has been fully realized (though it may not yet be in a product).
Shipped:  Hooray!

Help tags:  
----------

You can apply Help tags to your project to recruit other people to help you with its implementation.  Don't apply Help tags to a project which is not already being implemented.  
Before applying any HelpWanted tags to your project, make sure that you've listed the current project contributors and leaders in the People section of this page, so that potential contributors know whom to contact.

HelpWanted:  This is a generic tag that you can apply to indicate that you want help on a project.
HW-Hacker: You need help writing code.
HW-Tester: You have something that you want help testing, or writing unit tests for.
HW-Designer: You have a great idea but can't come up with the UI? Ask for help.
HW-PM: You want help from a product manager, to get market research or talk to a partner.
HW-Docs: You want someone to help you write documentation for your project.
HW-Packaging: Your project is going well but you want someone to help you build packages out of it.
*/


/*
Topic tags: Community, Security, Kernel, Desktop, Virtualization, Web20, Mobile, Management, Network, UnixFeature, Server, LowPower, Performance, LAMP, Graphics, DevTool, Mono, IdeaPool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Help: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packaging
Status: Idea, InProgress, TryMe, InBuildService, Done, Shipped

Separate your tags with a space (e.g "tag>Idea Server Performance").
*/

/*Happy Hacking everyone!*/