====== Automatic Unit Tests Generator ======

/* If this is your first time using the Idea Pool, please take a second to read the  comment at the end of this template, which explains how to use tags.  

Topic tags: Community, Security, QA, Kernel, Desktop, Virtualization, Web20, Mobile, Management, Network, UnixFeature, Server, LowPower, Performance, LAMP, Graphics, DevTool, Mono, IdeaPool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Status tags: Idea, InProgress, TryMe, InBuildService, Done, Shipped
Help tags: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packagin

Separate tags with a space like this:
{{tag> blargle fizzbozz bimbledeedoo}}
*/

{{tag>InProgress QA DevTool Mono JudgeQA}}

===== Description =====
Write a tool which would be able to produce set of tests based on public API of .NET assembly. As the first step we can begin with static methods, properties, and indexers. They will be easier to isolate and test.

The idea is to use a reflection or Cecil to inspect input/output arguments then generate automatically input data in memory and hit tested method with the data. After execution and some filtering, produce unit-test (C# code) which can be later used to test mimicked API or assembly.


===== Status =====

I have proved that the concept is feasible and tool can produce interesting results. Many of the core features are in-place and my guess is that another 10 MD work can bring some real results.

Here is a preview what the tool is able to do already without any hard-coded values.

namespace System.MonoTests {
    using NUnit.Framework;
    
	[TestFixture()]
	public class TimeZoneInfoTest {
		[Test()]
		public void ConvertTimeToUtc_Test_InvalidArguments() {
            System.DateTime result = System.TimeZoneInfo.ConvertTimeToUtc(null);
            Assert.AreEqual(1, result.Day, "Day");
            Assert.AreEqual(System.DayOfWeek.Monday, result.DayOfWeek, "DayOfWeek");
            Assert.AreEqual(1, result.DayOfYear, "DayOfYear");
            Assert.AreEqual(0, result.Hour, "Hour");
            Assert.AreEqual(System.DateTimeKind.Utc, result.Kind, "Kind");
            Assert.AreEqual(0, result.Millisecond, "Millisecond");
            Assert.AreEqual(0, result.Minute, "Minute");
            Assert.AreEqual(1, result.Month, "Month");
            Assert.AreEqual(0, result.Second, "Second");
            Assert.AreEqual(0, result.Ticks, "Ticks");
            Assert.AreEqual(0, result.TimeOfDay.Ticks, "Ticks");
            Assert.AreEqual(0, result.TimeOfDay.Days, "Days");
            Assert.AreEqual(0, result.TimeOfDay.Hours, "Hours");
            Assert.AreEqual(0, result.TimeOfDay.Milliseconds, "Milliseconds");
            Assert.AreEqual(0, result.TimeOfDay.Minutes, "Minutes");
            Assert.AreEqual(0, result.TimeOfDay.Seconds, "Seconds");
            Assert.AreEqual(0, result.TimeOfDay.TotalDays, "TotalDays");
            Assert.AreEqual(0, result.TimeOfDay.TotalHours, "TotalHours");
            Assert.AreEqual(0, result.TimeOfDay.TotalMilliseconds, "TotalMilliseconds");
            Assert.AreEqual(0, result.TimeOfDay.TotalMinutes, "TotalMinutes");
            Assert.AreEqual(0, result.TimeOfDay.TotalSeconds, "TotalSeconds");
            Assert.AreEqual(1, result.Year, "Year");
            Assert.IsFalse(result.IsDaylightSavingTime(), "IsDaylightSavingTime");
            Assert.AreEqual(4611686018427387904, result.ToBinary(), "ToBinary");
            Assert.AreEqual(0, result.ToOADate(), "ToOADate");
            Assert.AreEqual("Monday, 01 January 0001", result.ToLongDateString(), "ToLongDateString");
            Assert.AreEqual("00:00:00", result.ToLongTimeString(), "ToLongTimeString");
            Assert.AreEqual("01/01/0001", result.ToShortDateString(), "ToShortDateString");
            Assert.AreEqual("00:00", result.ToShortTimeString(), "ToShortTimeString");
            string[] expected_array = new string[] {
                    "01/01/0001",
                    "Monday, 01 January 0001",
                    "Monday, 01 January 0001 00:00",
                    "Monday, 01 January 0001 12:00 AM",
                    "Monday, 01 January 0001 0:00",
                    "Monday, 01 January 0001 12:00 AM",
                    "Monday, 01 January 0001 00:00:00",
                    "01/01/0001 00:00",
                    "01/01/0001 12:00 AM",
                    "01/01/0001 0:00",
                    "01/01/0001 12:00 AM",
                    "01/01/0001 00:00:00",
                    "January 01",
                    "January 01",
                    "0001-01-01T00:00:00.0000000Z",
                    "0001-01-01T00:00:00.0000000Z",
                    "Mon, 01 Jan 0001 00:00:00 GMT",
                    "Mon, 01 Jan 0001 00:00:00 GMT",
                    "0001-01-01T00:00:00",
                    "00:00",
                    "12:00 AM",
                    "0:00",
                    "12:00 AM",
                    "00:00:00",
                    "0001-01-01 00:00:00Z",
                    "Monday, 01 January 0001 00:00:00",
                    "0001 January",
                    "0001 January"};
            Assert.AreEqual(expected_array, result.GetDateTimeFormats(), "GetDateTimeFormats");
            Assert.AreEqual(System.TypeCode.DateTime, result.GetTypeCode(), "GetTypeCode");
        }
	}
}


===== People =====
/* This section is for listing all of the people involved in this idea or project:
  - The originator(s) of the idea
  - Interested people who might later help out with implementing this idea
  - Experts or knowledgeable people who could give advice about this idea

If you are already working on this project, and you need help, you can use one of the  HelpWanted tags to say so, and then write some specific details about the kinds of help that you need here. */

Marek Safar originated this idea.  No one is currently working on implementing this idea (it's up for grabs!).

===== Related Materials =====
/* Links, mockups, screen captures, files. */


/* How to Use Tags

All idea pages are tagged to make them easier to find and to indicate to the rest of the world the current state of your project.

You can apply as many topic and product tags to your idea as you want.

Status Tags
-----------
Idea: No one is working on this idea yet.
InProgress:  The project is underway.  When you apply this tag to an idea, please also edit the People section of the page to indicate who is working on the project. 
TryMe:  This project is at the point where other people can try it.  Include a link for code/packages in the page so people can find it.
InBuildService:  Idea's implementation posted in the openSUSE build service.  Provide a link.
Done:  The idea has been fully realized (though it may not yet be in a product).
Shipped:  Hooray!

Help tags:  
----------

You can apply Help tags to your project to recruit other people to help you with its implementation.  Don't apply Help tags to a project which is not already being implemented.  
Before applying any HelpWanted tags to your project, make sure that you've listed the current project contributors and leaders in the People section of this page, so that potential contributors know whom to contact.

HelpWanted:  This is a generic tag that you can apply to indicate that you want help on a project.
HW-Hacker: You need help writing code.
HW-Tester: You have something that you want help testing, or writing unit tests for.
HW-Designer: You have a great idea but can't come up with the UI? Ask for help.
HW-PM: You want help from a product manager, to get market research or talk to a partner.
HW-Docs: You want someone to help you write documentation for your project.
HW-Packaging: Your project is going well but you want someone to help you build packages out of it.
*/


/*
Topic tags: Community, Security, Kernel, Desktop, Virtualization, Web20, Mobile, Management, Network, UnixFeature, Server, LowPower, Performance, LAMP, Graphics, DevTool, Mono, IdeaPool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Help: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packaging
Status: Idea, InProgress, TryMe, InBuildService, Done, Shipped

Separate your tags with a space (e.g "tag>Idea Server Performance").
*/

/*Happy Hacking everyone!*/