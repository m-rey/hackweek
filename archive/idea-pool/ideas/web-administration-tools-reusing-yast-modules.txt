====== Web administration tools reusing YaST modules ======

/* If this is your first time using the Idea Pool, please take a second to read the  comment at the end of this template, which explains how to use tags.  

Topic tags: Management, Network, Web
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Status tags: Idea
Help tags: HelpWanted, HW-Hacker, HW-Designer

Separate tags with a space like this:
{{tag> blargle fizzbozz bimbledeedoo}}
*/

{{tag>Idea Management Network Web HW-Hacker HW-Designer openSUSE}}

===== Description =====
/* Describe your idea here. */
Wireless routers etc. typically come with a web administration frontend.
To build something similar based on SUSE, we'd need to create a framework to expose
configuration stuff; one could build on PHP (like FreeNAS), perl/cgi, TurboGears,
ZOPE, Ruby on Rails, or even .net(mono) or Java technologies.

Rather than doing this, the idea is to reuse the comprehensive existing knowledge and
abstraction of system configuration that we have already: YaST.

YaST has a remote capability using VNC -- but this is //not// the goal; rather native
web (HTML/CSS) technology should be used.

The way YaST was designed, it actually already abstracts the user interface from the
logic behind; a form / dialogue is described using a tree syntax (in YCP), which
one of the frontends (qt, ncurses, gtk) then displays and sends the values that
the user has filled in back. This transactional nature and the limited widget set
(how can you be more restricted than ncurses?)
make it possible to do it via HTML/CSS with forms. Not even fancy AJAX Web2.0pre
technology is needed.

So the idea is to create a yast2-frontend-httpd, which serves dialogue pages.

==== Goal ====
Get the frontend to implement every widget, so that every YaST module works in
the web mode. Create a start page that implements the functionality of the YaST
Control Center. Demo all this!

==== Bonus ideas ====
  * Use https (but don't use port 443 by default)
  * Keep a list of people that are authorized to authenticate and use this service
  * Keep a list of modules that a user may use (subset of existing YaST modules)
  * Possibly even further ideas how to control the access on even finer granularity
  * Rather than using thttpd or apache, see whether a few lines in perl or python or ruby won't be the easier solution to implement the web server (the https protocol)
  * Along the way, create a tool to actually convert the YCP based dialog tree description to XML; this way, using the existing language bindings in YaST, there's no need for someone to learn YCP.
  * Use stylesheets, so the thing can be themed.
  * If we get bored and are done by Wednesday, let's look into reviving the web-updater to also have a restricted web package manager.

===== People =====
/* This section is for listing all of the people involved in this idea or project:
  - The originator(s) of the idea
  - Interested people who might later help out with implementing this idea
  - Experts or knowledgeable people who could give advice about this idea

If you are already working on this project, and you need help, you can use one of the  HelpWanted tags to say so, and then write some specific details about the kinds of help that you need here. */

Kurt Garloff originated this idea.  No one is currently working on implementing this idea (it's up for grabs!).

Joachim Werner is interested in this idea.
Klaus Kaempf can give input to this.

Someone from the YaST team plus someone who is familiar with web technology should be able
to implement this.

===== Related Materials =====
/* Links, mockups, screen captures, files. */


/* How to Use Tags

All idea pages are tagged to make them easier to find and to indicate to the rest of the world the current state of your project.

You can apply as many topic and product tags to your idea as you want.

Status Tags
-----------
Idea: No one is working on this idea yet.
InProgress:  The project is underway.  When you apply this tag to an idea, please also edit the People section of the page to indicate who is working on the project. 
TryMe:  This project is at the point where other people can try it.  Include a link for code/packages in the page so people can find it.
InBuildService:  Idea's implementation posted in the openSUSE build service.  Provide a link.
Done:  The idea has been fully realized (though it may not yet be in a product).
Shipped:  Hooray!

Help tags:  
----------

You can apply Help tags to your project to recruit other people to help you with its implementation.  Don't apply Help tags to a project which is not already being implemented.  
Before applying any HelpWanted tags to your project, make sure that you've listed the current project contributors and leaders in the People section of this page, so that potential contributors know whom to contact.

HelpWanted:  This is a generic tag that you can apply to indicate that you want help on a project.
HW-Hacker: You need help writing code.
HW-Tester: You have something that you want help testing, or writing unit tests for.
HW-Designer: You have a great idea but can't come up with the UI? Ask for help.
HW-PM: You want help from a product manager, to get market research or talk to a partner.
HW-Docs: You want someone to help you write documentation for your project.
HW-Packaging: Your project is going well but you want someone to help you build packages out of it.
*/


/*
Topic tags: Community, Security, Kernel, Desktop, Virtualization, Web20, Mobile, Management, Network, UnixFeature, Server, LowPower, Performance, LAMP, Graphics, DevTool, Mono, IdeaPool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Help: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packaging
Status: Idea, InProgress, TryMe, InBuildService, Done, Shipped

Separate your tags with a space (e.g "tag>Idea Server Performance").
*/

/*Happy Hacking everyone!*/