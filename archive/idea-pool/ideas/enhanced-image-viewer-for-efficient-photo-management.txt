====== Enhanced image viewer for efficient photo management ======

/* If this is your first time using the Idea Pool, please take a second to read the  comment at the end of this template, which explains how to use tags.  

Topic tags: Community, Security, QA, Kernel, Desktop, Virtualization, Web20, Mobile, Management, Network, UnixFeature, Server, LowPower, Performance, LAMP, Graphics, DevTool, Mono, IdeaPool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Status tags: Idea, InProgress, TryMe, InBuildService, Done, Shipped
Help tags: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packaging

Separate tags with a space like this:
{{tag> Digital Photo Viewer JudgeMe }}
*/

{{tag>Idea Graphics Photography Camera Desktop}}

===== Description =====
/* Describe your idea here. */


Use cases:

Vlada engage in macro photography. He needs
to take several tries of each subject and wants to select the best ones.

Vlada wants to have his photos in best possible quality, therefore
he shots to RAW format. He wants to have most of his photos automatically 
converted to JPEG. He wants to convert selected files manually.

Vlada uses a set of scripts for sorting photos, which uses symlinks and MD5s
He can't use move/delete/comment functions of ordinary viewer, because
it would break the structure maintained by scripts or at least the MD5s.

Vlada wants to burn parts of his collection on CDs and/or copy it to external
hard disc. That breaks meta-information maintained by ordinary viewers.

Petr collect photos from various events from his camera and also the photos 
from friends. He wants to see the photos on time-line and also compensate
time offsets in various cameras, to have displayed the pictures in correct order.



Requirements:

1. sorting photos according to quality and selecting best shots:
  * comparison of both composition and technical quality (noise, DOF, histogram) side by side, optional connected scrolling
  * mark photos for deletion, actually delete them at the end of session

2. tagging and commenting photos
  * tags and comments are stored using open standards (EXIF)
 
3. handling of raw format
  * possibilities: RAW with embeded JPEG, RAW + JPEG from camera, RAW + JPEG generated later
  * in most cases it is not necessary to show RAW preview if JPEG with the same name exists
  * correct file (RAW or JPEG, configurable) to external programs (ufraw)
 
4. Interoperability
  * images can be acessed and modified by arbitrary software
  * directory/file oriented
  * no information is primarily stored outside image files
  * possibility to overload write access methods by external programs / scripts
  * almost all image modifications should be done by external programs
   

Implementation

Enhance gqview
  * already implemented features are near to requirements
  * gtk programming is easier for us



===== People =====
/* This section is for listing all of the people involved in this idea or project:
  - The originator(s) of the idea
  - Interested people who might later help out with implementing this idea
  - Experts or knowledgeable people who could give advice about this idea

If you are already working on this project, and you need help, you can use one of the  HelpWanted tags to say so, and then write some specific details about the kinds of help that you need here. */

Vladimir Nadvornik and Petr Ostadal originated this idea. They want to work on it.

===== Related Materials =====
/* Links, mockups, screen captures, files. */
Here is the current status:
[[http://svn.opensuse.org/svn/GQViewE/trunk/README.GQViewE]]

And here are packages for testing:
[[http://download.opensuse.org/repositories/home:/nadvornik:/GQViewE/]]

===== Update 2008-08-22 =====

This idea has eveolved into [[http://geeqie.sf.net]]

/* How to Use Tags

All idea pages are tagged to make them easier to find and to indicate to the rest of the world the current state of your project.

You can apply as many topic and product tags to your idea as you want.

Status Tags
-----------
Idea: No one is working on this idea yet.
InProgress:  The project is underway.  When you apply this tag to an idea, please also edit the People section of the page to indicate who is working on the project. 
TryMe:  This project is at the point where other people can try it.  Include a link for code/packages in the page so people can find it.
InBuildService:  Idea's implementation posted in the openSUSE build service.  Provide a link.
Done:  The idea has been fully realized (though it may not yet be in a product).
Shipped:  Hooray!

Help tags:  
----------

You can apply Help tags to your project to recruit other people to help you with its implementation.  Don't apply Help tags to a project which is not already being implemented.  
Before applying any HelpWanted tags to your project, make sure that you've listed the current project contributors and leaders in the People section of this page, so that potential contributors know whom to contact.

HelpWanted:  This is a generic tag that you can apply to indicate that you want help on a project.
HW-Hacker: You need help writing code.
HW-Tester: You have something that you want help testing, or writing unit tests for.
HW-Designer: You have a great idea but can't come up with the UI? Ask for help.
HW-PM: You want help from a product manager, to get market research or talk to a partner.
HW-Docs: You want someone to help you write documentation for your project.
HW-Packaging: Your project is going well but you want someone to help you build packages out of it.
*/


/*
Topic tags: Community, Security, Kernel, Desktop, Virtualization, Web20, Mobile, Management, Network, UnixFeature, Server, LowPower, Performance, LAMP, Graphics, DevTool, Mono, IdeaPool
Product tags: openSUSE, SLES, SLED, SLERT, SLEPOS, SLETC
Help: HelpWanted, HW-Hacker, HW-Tester, HW-Designer, HW-PM, HW-Docs, HW-Packaging
Status: Idea, InProgress, TryMe, InBuildService, Done, Shipped

Separate your tags with a space (e.g "tag>Idea Server Performance").
*/

/*Happy Hacking everyone!*/