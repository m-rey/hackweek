#!/usr/bin/ruby

require "json"
require "yaml"

def extract_tags string
  tags = string.split(/[, ]/).reject { |t| t.empty? }
  tags.map { |t| t.strip }
end

def extract_person string
  name = string
  if name =~ /(.*) \(/
    name = $1
  end
  if name =~ /(.*) </
    name = $1
  end  
  if name =~ /\[(.*)\]/
    name = $1
  elsif string =~ /\* (.*)/
    name = $1
  end
  if name.empty?
    STDERR "ERROR: empty name '#{string}'"
    exit 1
  end
  name
end

def create_people_map wiki_dir
  result = Hash.new
  emails = `cd #{wiki_dir}; git log --pretty=format:"%an <%ae>"|sort|uniq`
  emails.each_line do |line|
    line =~ /(.*) <(.*)>/
    result[$1] = $2
  end
  result
end

wiki_dir = ARGV[0]
name_map_file = ARGV[1]

if !wiki_dir
  STDERR.puts "Usage: projects2json <wiki-directory> [name-map-file]"
  exit 1
end

if !File.exists? wiki_dir
  STDERR.puts "Error: wiki directory '#{wiki_dir}' doesn't exist."
  exit 1
end

missing_originator_count = 0

projects = Array.new
people = Hash.new

Dir.entries( wiki_dir ).each do |entry|
  entry =~ /(.*)\.md$/
  page = $1
  next unless page
  next if ["Home","'Categories'","'Tags'","'Template'"].include? page
  
  project = Hash.new

  project[:title] = page

  description = ""
  members = Array.new
  originator = nil
  section = :none
  File.open( wiki_dir + "/" + entry ).each_line do |line|
    if line =~ /\*\*Categories.?\*\*(.*)/
      project[:categories] = extract_tags $1
    elsif line =~ /\*\*Tags.?\*\*(.*)/
      project[:tags] = extract_tags $1
    elsif line =~ /^## (.*)/
      subtitle = $1
      if subtitle == "People"
        section = :people
      elsif subtitle == "Description"
        # skip subtitle from output
      else
        section = :none
        description += line
      end
    else
      if section == :people
        if line =~ /(.*) originated/
          originator = extract_person $1
        elsif line =~ /(.*) will work/
          members.push extract_person $1
        elsif line =~ /(.*) will join/
          members.push extract_person $1
        elsif line =~ /(.*) will hopefully find time/
          members.push extract_person $1
        elsif line =~ /(.*) is really invited to participate/
          members.push extract_person $1
        elsif line =~ /(.*) is working/
          members.push extract_person $1
        elsif line =~ /^\* (.*)/
          members.push extract_person $1
        end
      else
        description += line
      end
    end
  end
  
  project[:description] = description

  if originator
    people[ originator ] = true
  end
  members.each do |person|
    people[ person ] = true
  end
  
  if !originator && !members.empty?
    originator = members.first
  end

  if !originator && members.empty?
    STDERR.puts page
    STDERR.puts "  missing people"
  end

  project[:originator] = originator
  project[:members] = members
  
  projects.push project
end

STDERR.puts "\n#{missing_originator_count} missing originators"


missing_emails_count = 0

people_map = create_people_map wiki_dir

if name_map_file
  name_map = YAML.load_file name_map_file
  name_map = name_map.invert
  STDERR.puts "NAMEMAP #{name_map.inspect}"
end

STDERR.puts "PEOPLE"
output_people = Array.new
people.keys.sort.each do |person|
  p = Hash.new
  p[:name] = person
  output_people.push p
  email = people_map[person]
  if !email
    if name_map[person]
      email = people_map[name_map[person]]
    end
  end
  if email
    p[:email] = email
  else
    STDERR.puts "  #{person}"
    missing_emails_count += 1
  end
end

STDERR.puts "#{missing_emails_count} missing emails"


output = Hash.new
output[ :projects ] = projects
output[ :people ] = output_people

puts JSON.pretty_generate output
